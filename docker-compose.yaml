services:
  db:
    image: 'postgres:13'
    container_name: postgres-library
    env_file:
      - .env
    ports:
      - "5432:5432"
    volumes:
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
      - postgres-library_data:/var/lib/postgresql/data/
    networks:
      - library-network
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U $POSTGRES_USER -d $POSTGRES_DB -h 127.0.0.1 || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s

  web:
    restart: always
    build:
      context: .
      dockerfile: backend/Dockerfile
    container_name: library_backend
    command:
      >
      sh -c "python /library-service/backend/manage.py makemigrations && python /library-service/backend/manage.py migrate && python /library-service/backend/manage.py runserver 0.0.0.0:8000"
    env_file:
      - .env
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./backend:/library-service/backend
      - media:/library-service/backend/media
    networks:
      - library-network
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8000/health/" ]
      interval: 10s
      retries: 5
      timeout: 5s
      start_period: 20s


  redis:
    image: redis:alpine
    container_name: redis
    restart: always
    env_file:
      - .env
    ports:
      - "6379:6379"
    networks:
      - library-network
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 30s
      retries: 3
      start_period: 5s
      timeout: 10s

  worker:
    build:
      context: .
      dockerfile: backend/Dockerfile
    container_name: celery_worker
    env_file:
      - .env
    command: "celery -A library_service worker --pool=solo --loglevel=info"
    working_dir: /library-service/backend
    environment:
      - DJANGO_SETTINGS_MODULE=library_service.settings
    depends_on:
      - redis
      - db
      - web
    volumes:
      - ./backend:/library-service/backend
    networks:
      - library-network

  beat:
    build:
      context: .
      dockerfile: backend/Dockerfile
    container_name: celery_beat
    env_file:
      - .env
    command: "celery -A library_service beat -l INFO --scheduler django_celery_beat.schedulers:DatabaseScheduler"
    working_dir: /library-service/backend
    environment:
      - DJANGO_SETTINGS_MODULE=library_service.settings
    depends_on:
      - redis
      - db
      - worker
    volumes:
      - ./backend:/library-service/backend
    networks:
      - library-network

  tg-bot:
    build:
      context: .
      dockerfile: backend/Dockerfile
    command: ["python", "/library-service/backend/library_bot/bot.py"]
    environment:
      - DJANGO_SETTINGS_MODULE=library_service.settings
    env_file:
      - .env
    volumes:
      - ./backend:/library-service/backend
    depends_on:
      - redis
      - db
      - worker
    networks:
      - library-network

volumes:
  postgres-library_data:
    driver: local
  media:
    driver: local

networks:
  library-network:
    driver: bridge
